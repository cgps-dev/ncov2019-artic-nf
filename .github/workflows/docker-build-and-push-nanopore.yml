name: Create and publish a Docker image

on:   
  push:
    branches:
      - master
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
      - t*
  # Run tests for any PRs.
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: echo ${{ github.event.release }}
      #   run: docker build . --file environments/nanopore/Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      # - name: Log in to registry
      #   if: ${{ github.event_name != 'pull_request' }}
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # - name: Push image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   run: |
      #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "master" ] && VERSION=latest
      #     echo GITHUB_REF="${{ github.ref }}"
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION
      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION
      # - name: Push latest
      #   if: ${{ github.event_name != 'pull_request' && startsWith(github.event.release.tag_name, 'v')}}
      #   run: |
      #     docker tag $IMAGE_NAME $IMAGE_ID:latest
      #     docker push $IMAGE_ID:latest